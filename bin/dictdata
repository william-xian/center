#! /usr/bin/python
import re;
import urllib;
import urllib2;
import sys;
def debug():
	xml = open("word.xml").read();
	print get_text(xml);
	print get_elements_by_path(xml, "custom-translation/content");
	#print_translations(xml, False, False);
def get_elements_by_path(xml, elem):
	if type(xml) == type(''):
		xml = [xml];
	if type(elem) == type(''):
		elem = elem.split('/');
	if (len(xml) == 0):
		return [];
	elif (len(elem) == 0):
		return xml;
	elif (len(elem) == 1):
		result = [];
		for item in xml:
			result += get_elements(item, elem[0]);
		return result;
	else:
		subitems = [];
		for item in xml:
			subitems += get_elements(item, elem[0]);
		return get_elements_by_path(subitems, elem[1:]);
textre = re.compile("\!\[CDATA\[(.*?)\]\]", re.DOTALL);
def get_text(xml):
	match = re.search(textre, xml);
	if not match:
		return xml;
	return match.group(1);
def get_elements(xml, elem):
	p = re.compile("<" + elem + ">" + "(.*?)</" + elem + ">", re.DOTALL);
	it = p.finditer(xml);
	result = [];
	for m in it:
		result.append(m.group(1));
	return result;
GREEN = "\033[1;32m";
DEFAULT = "\033[0;49m";
BOLD = "\033[1m";
UNDERLINE = "\033[4m";
NORMAL = "\033[m";
RED = "\033[1;31m"
def crawl_xml(queryword):
	return urllib2.urlopen("http://dict.yodao.com/search?keyfrom=dict.python&q="
        + urllib.quote_plus(queryword) + "&xmlDetail=true&doctype=xml").read();
def print_translations(xml, with_color, detailed):
	original_query = get_elements(xml, "original-query");
	word = get_text(original_query[0]);
	original_query = get_elements(xml, "phonetic-symbol");
	pron = get_text(original_query[0]);
	print "#" + word ;
	print "#" + pron ;

	custom_translations = get_elements(xml, "custom-translation");
	for cus in custom_translations:
		source = get_elements_by_path(cus, "source/name");
		contents = get_elements_by_path(cus, "translation/content");
		print "#";
		for content in contents:
			print get_text(content);

	example_sentences = get_elements(xml, "example-sentences");
	sentences = get_elements_by_path(example_sentences,"sentence-pair");

	print "#";
	for sentence in sentences:
		sents = get_elements_by_path(sentence,"sentence");
		trans = get_elements_by_path(sentence,"sentence-translation");
		print "|-> " + get_text(sents[0]);
		print " -> " + get_text(trans[0]);
	
def usage():
	print "usage: dict.py word_to_translate";
def main(argv):
	if len(argv) <= 0:
		usage();
		#debug();
		sys.exit(1);
	xml = crawl_xml(" ".join(argv));
	print_translations(xml, True, False);

if __name__ == "__main__":
	main(sys.argv[1:]);
